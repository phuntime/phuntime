#!/opt/bin/php
<?php
declare(strict_types=1);

use Phuntime\Aws\Type\ApiGatewayProxyEvent;
use Phuntime\Aws\Type\ApiGatewayV2ProxyEvent;
use Phuntime\Fpm\PhpFpmProcess;
use Symfony\Contracts\HttpClient\Exception\TimeoutExceptionInterface;

require_once __DIR__.'/vendor/autoload.php';


$awsContext = \Phuntime\Aws\AwsContext::fromArray($_SERVER);
$httpClient = new \Phuntime\Core\HttpClient\BlockingHttpClient();
$awsRuntimeClient = new \Phuntime\Aws\AwsRuntimeClient(
    $awsContext->getRuntimeHost(),
    $httpClient
);

$runtime = new \Phuntime\Aws\AwsRuntime($awsContext, $awsRuntimeClient);

$logger = $runtime->getLogger();
$function = new \Phuntime\Fpm\FpmHandler($runtime->getContext(), $logger);
$fpmProcess = new PhpFpmProcess(
    $logger,
    $_SERVER['FPM_PATH'] ?? '/opt/bin/php-fpm',
    $_SERVER['FPM_CONFIG_PATH'] ?? '/opt/php/php-fpm.conf'
);

$psr17Factory = new \Nyholm\Psr7\Factory\Psr17Factory();
$apiGwPsr = new \Phuntime\Bridge\Aws\ApiGatewayPsrBridge($psr17Factory);
$classifier = new \Phuntime\Aws\EventClassifier();

try {
    $function->boot();
    $fpmProcess->start();
} catch (\Throwable $exception) {


    $runtime->handleInitializationException($exception);
    return 1;
}


/**
 * All events received by AWS Lambda are received and handled here.
 */
while (true) {
    try {
        $event = $runtime->getNextEvent();

        /** @var ApiGatewayV2ProxyEvent|ApiGatewayProxyEvent|null $apiGwEvent */
        $apiGwEvent = null;
        $apiGwVersion = 1;
        if($classifier->isApiGatewayV1ProxyEvent($event->getPayload())) {
            $apiGwEvent = ApiGatewayProxyEvent::fromArray($event->getPayload());
        }

        if($classifier->isApiGatewayV2ProxyEvent($event->getPayload())) {
            $apiGwEvent = ApiGatewayV2ProxyEvent::fromArray($event->getPayload());
            $apiGwVersion = 2;
        }

        if($apiGwEvent === null) {
            throw new \LogicException('Given event is not a Api Gateway Request');
        }

        $psrRequest = $apiGwPsr->apiGwToPsr7Request($apiGwEvent);
        $response = $function->handleEvent($psrRequest);
        $proxyResult = $apiGwPsr->psr7ResponseToApiGw($response, $apiGwVersion);
        $runtime->respondToEvent($event->getEventId(), $proxyResult);
        $fpmProcess->tick();
    } catch (\Throwable $e) {
        if($e instanceof TimeoutExceptionInterface) {
            continue;
        }
        throw $e;
        $fpmProcess->stop();
    }
}

return 1;