#!/opt/bin/php
<?php
declare(strict_types=1);

use Phuntime\Fpm\PhpFpmProcess;
require_once __DIR__.'/vendor/autoload.php';

$runtime = \Phuntime\Aws\AwsRuntime::fromEnvironment($_SERVER);

$logger = $runtime->getLogger();
$function = new \Phuntime\Fpm\FpmHandler($runtime->getContext(), $logger);
$fpmProcess = new PhpFpmProcess(
        $logger,
        $_SERVER['FPM_PATH'] ?? '/opt/bin/php-fpm',
        $_SERVER['FPM_CONFIG_PATH'] ?? '/opt/php/php-fpm.conf'
);

$psr17Factory = new \Nyholm\Psr7\Factory\Psr17Factory();
$apiGwPsr = new \Phuntime\Bridge\Aws\ApiGatewayPsrBridge($psr17Factory);

try {
    $function->boot();
    $fpmProcess->start();
} catch (\Throwable $exception) {


    $runtime->handleInitializationException($exception);
    return 1;
}


/**
 * All events received by AWS Lambda are received and handled here.
 */
while (true) {
    try {
        /** @var \Phuntime\Aws\Type\ApiGatewayProxyEvent $apiGwEvent */
        $apiGwEvent = $runtime->getNextEvent();
        if(!($apiGwEvent instanceof \Phuntime\Aws\Type\ApiGatewayProxyEvent)) {
            //@TODO: Notify that invalid request happened
        }

        $psrRequest = $apiGwPsr->apiGwToPsr7Request($apiGwEvent);
        $response = $function->handleEvent($psrRequest);
        $proxyResult = $apiGwPsr->psr7ResponseToApiGw($response);
        $runtime->respondToEvent($apiGwEvent->getRequestId(), $proxyResult);
        $fpmProcess->tick();
    } catch (\Throwable $e) {
        throw $e;
        $fpmProcess->stop();
    }
}

return 1;